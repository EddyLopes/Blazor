@page "/AddSystemCode"
@attribute [Authorize]

<PageTitle>New System Code</PageTitle>

<div class="row">
    <EditForm Model="systemCode" OnValidSubmit="CreateNewSystemCode" FormName="AddSystemCode">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="col-md-12">
            <h3>Add New System Code</h3>
        </div>
        <div class="col-md-12">
            <div class="row">
                <div class="form-group col-md-6">
                    <label for="systemCode.Code">Code</label>
                    <InputText for="Code" class="form-control" @bind-Value="systemCode.Code" />
                    <ValidationMessage For="() => systemCode.Code" class="text-danger" />
                </div>
                <div class="form-group col-md-6">
                    <label for="systemCode.Description">Name</label>
                    <InputText for="Description" class="form-control" @bind-Value="systemCode.Description" />
                    <ValidationMessage For="() => systemCode.Description" class="text-danger" />
                </div>
                <div class="form-group col-md-6">
                    <label for="systemCode.OrderNo">Order No</label>
                    <InputNumber for="OrderNo" class="form-control" @bind-Value="systemCode.OrderNo" />
                    <ValidationMessage For="() => systemCode.OrderNo" class="text-danger" />
                </div>

            </div>
            <div class="form-group mt-4">
                <button type="button" class="btn btn-warning float-start" @onclick="BackToList">Back to List</button>
                <button type="submit" class="btn btn-primary float-end">Save System Code</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    public SystemCode systemCode { get; set; } = new();

    public string UserId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    public UserManager<ApplicationUser> userManager { get; set; }

    [Inject]
    public ISystemCodeServices SystemCodeServices { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationState).User;
        if(user.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(user);
            UserId = currentUser.Id;
        }
    }

    private async Task CreateNewSystemCode()
    {
        systemCode.CreatedOn = DateTime.UtcNow;
        systemCode.CreatedById = UserId;
        var result = await SystemCodeServices.AddSystemCodeAsync(systemCode);
        BackToList();
    }

    private void BackToList()
    {
        NavigationManager.NavigateTo("/SystemCodes");
    }
}
