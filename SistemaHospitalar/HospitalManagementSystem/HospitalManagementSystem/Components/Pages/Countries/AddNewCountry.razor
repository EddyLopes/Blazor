@page "/AddCountry"

<PageTitle>New Country</PageTitle>

<div class="row">
    <EditForm Model="country" OnValidSubmit="CreateNewCountry" FormName="AddCountryForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="col-md-12">
            <h3>Add Country</h3>
        </div>
        <div class="col-md-12">
            <div class="row">
                <div class="form-group col-md-6">
                    <label for="country.Code">Code</label>
                    <InputText for="Code" class="form-control" @bind-Value="country.Code" />
                    <ValidationMessage For="() => country.Code" class="text-danger" />
                </div>
                <div class="form-group col-md-6">
                    <label for="country.Name">Name</label>
                    <InputText for="Name" class="form-control" @bind-Value="country.Name" />
                    <ValidationMessage For="() => country.Name" class="text-danger" />
                </div>
            </div>
            <div class="form-group mt-4">
                <button type="button" class="btn btn-warning float-start" @onclick="BackToList">Back to List</button>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">
                    Save Country
                </MudButton>

            </div>
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    public Country country { get; set; } = new();

    public string UserId { get; set; } = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = null!;

    [Inject]
    public UserManager<ApplicationUser> userManager { get; set; } = null!;

    [Inject]
    public ICountryServices CountryServices { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationState).User;
        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(user);
            UserId = currentUser.Id;
        }
    }

    private async Task CreateNewCountry()
    {
        country.CreatedOn = DateTime.UtcNow;
        country.CreatedById = UserId;
        var result = await CountryServices.AddCountryAsync(country);
        BackToList();
    }

    private void BackToList()
    {
        NavigationManager.NavigateTo("/Countries");
    }
}
