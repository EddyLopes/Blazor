@implements IDisposable
@rendermode InteractiveServer

<ul class="navbar-nav" id="navbar-nav">
    <li class="menu-title"><span data-key="t-menu">Menu</span></li>
    <li class="nav-item">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            <i class="ri-dashboard-2-line"></i> <span data-key="t-dashboards">Painel</span>
        </NavLink>
    </li>
    <li class="nav-item">
        <a class="nav-link menu-link" href="#sidebarRegisters" data-bs-toggle="collapse" role="button" aria-expanded="false" aria-controls="sidebarDashboards">
            <i class="ri-file-list-3-line"></i> <span data-key="t-Registers">Cadastro</span>
        </a>
        <div class="collapse menu-dropdown" id="sidebarRegisters">
            <ul class="nav nav-sm flex-column">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/Company/List">
                        Empresa
                    </NavLink>
                </li>
                @if (hasCompanySelected)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/Account/List">
                            Contas
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/Category/List">
                            Categorias
                        </NavLink>
                    </li>
                }
            </ul>
        </div>
    </li>
    @if (hasCompanySelected)
    {
        <li class="nav-item">
            <a class="nav-link menu-link" href="#sidebarAccount" data-bs-toggle="collapse" role="button" aria-expanded="false" aria-controls="sidebarLayouts">
                <i class="ri-money-dollar-circle-line"></i> <span data-key="t-account">Contas</span>
            </a>
            <div class="collapse menu-dropdown" id="sidebarAccount">
                <ul class="nav nav-sm flex-column">
                    <li class="nav-item">
                        <NavLink href="/Financial/Pay/List" class="nav-link" data-key="t-pay">Pagar</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink href="/Financial/Receive/List" class="nav-link" data-key="t-receive">Receber</NavLink>
                    </li>
                </ul>
            </div>
        </li>
    }
</ul>

@code {
    private string? currentUrl;
    private bool hasCompanySelected = false;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    public ILocalStorageService LocalStorage { get; set; } = null!;

    [Inject]
    public CompanyOnSelectedNotification Notification { get; set; } = null!;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        Notification.OnCompanySelected += OnCompanySelected;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //return base.OnAfterRenderAsync(firstRender);
        //não pode ser chamado no OnInitializedAsync, pois o LocalStorage ainda não está pronto
        hasCompanySelected = await LocalStorage.ContainKeyAsync(AppConstants.LocalStorageCompany);
        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        Notification.OnCompanySelected -= OnCompanySelected;
    }

    private void OnCompanySelected()
    {
        hasCompanySelected = true;
        //StateHasChanged();
    }
}