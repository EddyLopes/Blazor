@page "/category/detail/{id:int}"
@rendermode InteractiveServer

<PageTitle>
    Categoria - Confirmar exclusão
</PageTitle>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-4 flex-grow-1">Categoria - Confirme a exclusão do registro</h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-xxl-3 col-md-6 mt-3">
                        <div>
                            <label class="form-label">Nome</label>
                            <br />
                            @Category.Name
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="d-flex justify-content-between">
                        <a href="/Category/List" class="btn btn-light">Voltar</a>
                        <button @onclick="Delete" type="button" class="btn btn-soft-danger"><i class="ri-delete-bin-line"></i>Confirmar exclusão</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public Category Category { get; set; } = new();

    [Parameter]
    public int Id { get; set; }

    [Inject]
    public IJSRuntime JS { get; set; } = null!;

    [Inject]
    public ICategoryRepository CategoryRepository { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    public ILocalStorageService LocalStorage { get; set; } = null!;


    protected override async Task OnParametersSetAsync()
    {
        var category = await CategoryRepository.GetAsync(Id);
        if (category is not null)
            Category = category;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            return;

        if (Category.Id == 0)
        {
            await JS.InvokeVoidAsync("alert", "Categoria seleciona não encontrada!");
            NavigationManager.NavigateTo("/Category/List");
            return;
        }

        var company = await LocalStorage.GetItemAsync<Company>(AppConstants.LocalStorageCompany);

        if (Category.CompanyId != company.Id)
        {
            await JS.InvokeVoidAsync("alert", $"A conta não pertence a empresa '{company.LegalName}'!");
            NavigationManager.NavigateTo("/Category/List");
            return;
        }
    }

    private async Task Delete()
    {
        await CategoryRepository.DeleteAsync(Category.Id);
        await JS.InvokeVoidAsync("alert", "Registro excluído com sucesso!");
        NavigationManager.NavigateTo("/Category/List");
    }
}