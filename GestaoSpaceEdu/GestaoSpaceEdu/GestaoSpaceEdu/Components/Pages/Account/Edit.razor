@page "/account/edit/{id:int}"
@rendermode InteractiveServer

<PageTitle>
    Conta - Atualizar
</PageTitle>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-4 flex-grow-1">Atualizar Conta</h4>
            </div>
            <div class="card-body">
                <EditForm Model="Account" OnValidSubmit="Submit" FormName="formAccount">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="description" class="form-label">Descrição/Nome</label>
                                <InputText @bind-Value="Account.Description" class="form-control" id="description" autocomplete="off" />
                                <ValidationMessage For="() => Account.Description" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="balance" class="form-label">Saldo Inicial</label>
                                <InputNumber @bind-Value="Account.Balance" class="form-control" id="balance" autocomplete="off" />
                                <ValidationMessage For="() => Account.Balance" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="balanceDate" class="form-label">Data de Início</label>
                                <InputDate @bind-Value="Account.BalanceDate" class="form-control" id="balanceDate" autocomplete="off" />
                                <ValidationMessage For="() => Account.BalanceDate" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="d-flex justify-content-between">
                            <a href="/Account/List" class="btn btn-light" @onclick="BackRollback">Voltar</a>
                            <button type="submit" class="btn btn-primary">Salvar</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public Account Account { get; set; } = new() { BalanceDate = DateTimeOffset.Now };

    [Parameter]
    public int Id { get; set; }

    [Inject]
    public IJSRuntime JS { get; set; } = null!;

    [Inject]
    public IAccountRepository AccountRepository { get; set; } = null!;

    [Inject]
    public ILocalStorageService LocalStorage { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;
    
    [Inject]
    private ApplicationDbContext _dbContext { get; set; } = null!;
    
    protected override async Task OnParametersSetAsync()
    {
        var account = await AccountRepository.GetAsync(Id);
        if (account is not null)
            Account = account;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            return;

        if (Account.Id == 0)
        {
            await JS.InvokeVoidAsync("alert", "Conta seleciona não encontrada!");
            NavigationManager.NavigateTo("/Account/List");
            return;
        }

        var company = await LocalStorage.GetItemAsync<Company>(AppConstants.LocalStorageCompany);

        if (Account.CompanyId != company.Id)
        {
            await JS.InvokeVoidAsync("alert", $"A conta não pertence a empresa '{company.LegalName}'!");
            NavigationManager.NavigateTo("/Account/List");
            return;
        }
    }

    private async Task Submit()
    {
        await AccountRepository.UpdateAsync(Account);
        await JS.InvokeVoidAsync("alert", "Registro salvo com sucesso!");
        NavigationManager.NavigateTo("/Account/List");
    }

    private void BackRollback()
    {
        _dbContext.ChangeTracker.Clear();
    }
}

