@page "/Financial/{Type}/Add"
@rendermode InteractiveServer

<PageTitle>
    @Type - Cadastro
</PageTitle>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-4 flex-grow-1">Cadastrar @Type</h4>
            </div>
            <div class="card-body">
                <EditForm Model="FinancialTransaction" OnValidSubmit="Submit" FormName="formFinancialTransaction">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="description" class="form-label">Descrição</label>
                                <InputText @bind-Value="FinancialTransaction.Description" class="form-control" id="description" autocomplete="off" />
                                <ValidationMessage For="() => FinancialTransaction.Description" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="category" class="form-label">Categoria</label>
                                <InputSelect @bind-Value="FinancialTransaction.CategoryId" class="form-select" id="category">
                                    <option value="0">--Selecione--</option>
                                    @if (_categories is not null)
                                    {
                                        foreach (var category in _categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => FinancialTransaction.CategoryId" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="account" class="form-label">Conta</label>
                                <InputSelect @bind-Value="FinancialTransaction.AccountId" class="form-control" id="account">
                                    <option value="0">--Selecione--</option>
                                    @if (_accounts is not null)
                                    {
                                        foreach (var account in _accounts)
                                        {
                                            <option value="@account.Id">@account.Description</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => FinancialTransaction.AccountId" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="referenceDate" class="form-label">Data Competência</label>
                                <InputDate @bind-Value="FinancialTransaction.ReferenceDate" class="form-control" id="referenceDate" autocomplete="off" />
                                <ValidationMessage For="() => FinancialTransaction.ReferenceDate" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="dueDate" class="form-label">Data de Vencimento</label>
                                <InputDate @bind-Value="FinancialTransaction.DueDate" class="form-control" id="dueDate" autocomplete="off" />
                                <ValidationMessage For="() => FinancialTransaction.DueDate" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="amount" class="form-label">Valor</label>
                                <InputNumber @bind-Value="FinancialTransaction.Amount" class="form-control" id="amount" autocomplete="off" />
                                <ValidationMessage For="() => FinancialTransaction.Amount" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="repeat" class="form-label">Repetir</label>
                                <InputSelect @bind-Value="FinancialTransaction.Repeat" @bind-Value:after="RepeatChanged" class="form-control" id="repeat">
                                    @foreach (Recurrence option in Enum.GetValues(typeof(Recurrence)))
                                    {
                                        <option value="@option">@option.GetDisplayName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => FinancialTransaction.Repeat" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="repeatTimes" class="form-label">Vezes</label>
                                <InputNumber @bind-Value="FinancialTransaction.RepeatTimes" class="form-control" id="repeatTimes" autocomplete="off" disable="@_repeatTimesDisabled" />
                                <ValidationMessage For="() => FinancialTransaction.RepeatTimes" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="interestPenalty" class="form-label">Juros/Multa</label>
                                <InputNumber @bind-Value="FinancialTransaction.InterestPenalty" class="form-control" id="interestPenalty" autocomplete="off" />
                                <ValidationMessage For="() => FinancialTransaction.InterestPenalty" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="discount" class="form-label">Desconto</label>
                                <InputNumber @bind-Value="FinancialTransaction.Discount" class="form-control" id="discount" autocomplete="off" />
                                <ValidationMessage For="() => FinancialTransaction.Discount" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="paymentDate" class="form-label">Data Pagamento</label>
                                <InputDate @bind-Value="FinancialTransaction.PaymentDate" class="form-control" id="paymentDate" autocomplete="off" />
                                <ValidationMessage For="() => FinancialTransaction.PaymentDate" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="amoundPaid" class="form-label">Valor pago</label>
                                <InputNumber @bind-Value="FinancialTransaction.AmoundPaid" class="form-control" id="amoundPaid" autocomplete="off" />
                                <ValidationMessage For="() => FinancialTransaction.AmoundPaid" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div>
                                <label for="observation" class="form-label">Observação</label>
                                <InputTextArea @bind-Value="FinancialTransaction.Observation" class="form-control" id="observation" autocomplete="off" />
                                <ValidationMessage For="() => FinancialTransaction.Observation" class="text-danger" />
                            </div>
                            @if (FinancialTransaction.Documents is not null && FinancialTransaction.Documents.Count > 0)
                            {
                                <table class="table table-striped">
                                    <tr>
                                        <th>Nome</th>
                                        <th>Opções</th>
                                    </tr>
                                    @foreach (var doc in FinancialTransaction.Documents)
                                    {
                                        <tr>
                                            <td>@doc.Name</td>
                                            <td><button class="btn btn-danger">Excluir</button></td>
                                        </tr>
                                    }
                                </table>
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div>
                                <label for="anexar" class="form-label">Anexar documentos</label>
                                <InputFile class="form-control" id="anexar" OnChange="UploadFile" />
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="d-flex justify-content-between">
                            <a href="/Financial/@Type/List" class="btn btn-light">Voltar</a>
                            <button type="submit" class="btn btn-primary">Salvar</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Type { get; set; }

    [SupplyParameterFromForm]
    public FinancialTransaction FinancialTransaction { get; set; } = new() 
    { 
        ReferenceDate = DateTimeOffset.Now, 
        DueDate = DateTimeOffset.Now,
        Documents = []
    };

    private Company? Company;

    private List<Category>? _categories;
    private List<Account>? _accounts;

    private bool _repeatTimesDisabled = true;

    [Inject]
    public IJSRuntime JS { get; set; } = null!;

    [Inject]
    public IFinancialTransactionRepository FinancialTransactionRepository { get; set; } = null!;

    [Inject]
    public ICategoryRepository CategoryRepository { get; set; } = null!;

    [Inject]
    public IAccountRepository AccountRepository { get; set; } = null!;

    [Inject]
    public ILocalStorageService LocalStorage { get; set; } = null!;


    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    public IWebHostEnvironment WebHostEnvironment { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        Company = await LocalStorage.GetItemAsync<Company>(AppConstants.LocalStorageCompany);
        _categories = await CategoryRepository.GetAllAsync(Company!.Id);
        _accounts = await AccountRepository.GetAllAsync(Company!.Id);
        StateHasChanged();
    }

    private async Task Submit()
    {
        if (Enum.TryParse(Type, true, out TypeFinancialTransaction typeConverted))
        {
            FinancialTransaction.TypeFinancialTransaction = typeConverted;
        }

        FinancialTransaction.CreatedAt = DateTimeOffset.Now;
        FinancialTransaction.CompanyId = Company!.Id;
        await FinancialTransactionRepository.AddAsync(FinancialTransaction);

        await JS.InvokeVoidAsync("alert", "Registro salvo com sucesso!");

        NavigationManager.NavigateTo($"/Financial/{Type}/List");
    }

    private void RepeatChanged()
    {
        if (FinancialTransaction.Repeat == Recurrence.None)
        {
            _repeatTimesDisabled = true;
            FinancialTransaction.RepeatTimes = null;
        }
        else
        {
            _repeatTimesDisabled = false;
        }
    }
    private async Task UploadFile(InputFileChangeEventArgs args)
    {
        var file = args.File;

        if(file is not null)
        {
            var fileName = Path.GetFileNameWithoutExtension(file.Name) + "-" + Guid.NewGuid() + Path.GetExtension(file.Name);
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", fileName);

            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fileStream);

            var doc = new Document();
            doc.Path = fileName;
            doc.Name = Path.GetFileName(file.Name);
            doc.CreatedAt = DateTimeOffset.Now;

            if (FinancialTransaction.Documents is not null)
                FinancialTransaction.Documents.Add(doc);
        }
    }

    // private void Uploaded(Document doc)
    // {
    //     if (FinancialTransaction.Documents is not null)
    //     {
    //         FinancialTransaction.Documents.Add(doc);
    //     }
    // }
}
