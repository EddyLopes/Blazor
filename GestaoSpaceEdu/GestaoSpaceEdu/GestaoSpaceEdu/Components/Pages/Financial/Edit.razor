@page "/Financial/{Type}/Edit/{id:int}"
@rendermode InteractiveServer

@if (Type is not null)
{
    <PageTitle>
        @TypeFinancialTransactionToString.Converter(Type).ToUpper() - ATUALIZAR
    </PageTitle>
}

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                @if (Type is not null)
                {
                    <h4 class="card-title mb-4 flex-grow-1">Atualizar @TypeFinancialTransactionToString.Converter(Type)</h4>
                }
            </div>
            <div class="card-body">
                @if (FinancialTransaction is not null)
                {
                    <FinancialTransactionForm IsEditForm="@true" FinancialTransaction="@FinancialTransaction" Type="@Type" OnSave="Save" />
                }
            </div>
        </div>
    </div>
</div>

@code {
    public FinancialTransaction? FinancialTransaction { get; set; }

    [Parameter]
    public string? Type { get; set; }

    [Parameter]
    public int Id { get; set; }

    #region Services
    [Inject]
    public IFinancialTransactionRepository FinancialTransactionRepository { get; set; } = null!;

    [Inject]
    public IJSRuntime JS { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;
    #endregion

    protected override async Task OnParametersSetAsync()
    {
        FinancialTransaction = (await FinancialTransactionRepository.GetAsync(Id))!;
    }

    private async Task Save(FinancialTransaction financialTransaction)
    {
        await FinancialTransactionRepository.UpdateAsync(financialTransaction);
        await JS.InvokeVoidAsync("alert", "Registro salvo com sucesso!");
        NavigationManager.NavigateTo($"/Financial/{Type}/List");
    }
}
