<div class="row">
    <div class="col-12">
        <div>
            <label for="anexar" class="form-label">Anexar documentos</label>
            <InputFile class="form-control" id="anexar" OnChange="UploadFile" />
            <div class="form-text">
                Tamanho máximo do arquivo : @(_maxFileSize / (1024 * 1024)) MB
            </div>
            <div class="col-12 mt-4 mb-4">
                @if (Documents is not null && Documents.Count > 0)
                {
                    <div class="table-responsive table-card">
                        <table class="table align-middle table-nowrap table-striped-columns mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col">Nome</th>
                                    <th scope="col">Opções</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var doc in Documents)
                                {
                                    <tr>
                                        <td><a href="/uploads/@doc.Path" target="_blank">@doc.Name</a></td>
                                        <td><button type="button" class="btn btn-sm btn-danger waves-effect waves-light" @onclick="() => RemoveFile(doc)">Excluir</button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private int _maxFileSize = 10 * 1024 * 1024; // 10 MB

    [Parameter]
    public bool IsEditForm { get; set; }

    [Parameter]
    public List<Document> Documents { get; set; } = [];

    [Parameter]
    public EventCallback<Document> OnUploaded { get; set; }

    [Parameter]
    public EventCallback<Document> OnRemoved { get; set; }

    #region Services
    [Inject]
    public IJSRuntime JS { get; set; } = null!;

    [Inject]
    public IWebHostEnvironment WebHostEnvironment { get; set; } = null!;
    #endregion

    private async Task UploadFile(InputFileChangeEventArgs args)
    {
        try
        {
            var file = args.File;

            if (file is not null)
            {
                if (file.Size > _maxFileSize)
                {
                    await JS.InvokeVoidAsync("alert", $"O arquivo passou do limite permitido ({_maxFileSize / (1024 * 1024)})MB");
                    return;
                }

                var fileName = Path.GetFileNameWithoutExtension(file.Name) + "-" + Guid.NewGuid() + Path.GetExtension(file.Name);
                var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", fileName);

                await using var fileStream = new FileStream(filePath, FileMode.Create);
                await file.OpenReadStream(maxAllowedSize: _maxFileSize).CopyToAsync(fileStream);

                var doc = new Document();
                doc.Path = fileName;
                doc.Name = Path.GetFileName(file.Name);
                doc.CreatedAt = DateTimeOffset.Now;

                Documents.Add(doc);
                await OnUploaded.InvokeAsync(doc);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Ocorreu um erro! {ex.Message}");
        }

    }

    private void RemoveFile(Document doc)
    {
        var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", doc.Path);

        if (!IsEditForm)
        {
            if (File.Exists(filePath))
                File.Delete(filePath);
        }

        if (Documents is not null)
        {
            OnRemoved.InvokeAsync(doc);
        }
    }
}
