@typeparam TItem

<div class="table-responsive">
    <input type="text" @bind="@searchTerm" @bind:event="oninput" placeholder="Pesquisar..." class="form-control mb-2" />

    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                @foreach (var column in Columns)
                {
                    <th @onclick="() => SortByColumn(column)" style="cursor: pointer;">
                        @column.Title
                        @if (sortColumn == column.FieldName)
                        {
                            <span>@(sortAscending ? "▲" : "▼")</span>
                        }
                    </th>
                }
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in SortedItems)
            {
                <tr>
                    @foreach (var column in Columns)
                    {
                        <td>@column.GetValue(item)</td>
                    }
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditItem(item)">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-success" @onclick="AddNewItem">Incluir Novo</button>
</div>

@code {
    [Parameter] public List<TItem> Items { get; set; } = new List<TItem>();
    [Parameter] public EventCallback<TItem> OnAdd { get; set; }
    [Parameter] public EventCallback<TItem> OnEdit { get; set; }
    [Parameter] public EventCallback<TItem> OnDelete { get; set; }

    private string searchTerm = string.Empty;
    private bool sortAscending = true;
    private string? sortColumn;
    private TItem? selectedItem;
    private List<ColumnDefinition<TItem>> Columns = new List<ColumnDefinition<TItem>>();

    protected override void OnInitialized()
    {
        // Define colunas para o componente dinâmico
        Columns = typeof(TItem).GetProperties()
            .Select(prop => new ColumnDefinition<TItem>
                {
                    Title = prop.Name,
                    FieldName = prop.Name,
                    GetValue = (item) => prop.GetValue(item)?.ToString() ?? string.Empty
                }).ToList();
    }

    private IEnumerable<TItem> FilteredItems => Items
        .Where(item => string.IsNullOrEmpty(searchTerm) || Columns.Any(col => col.GetValue(item).Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));

    private IEnumerable<TItem> SortedItems => sortAscending
        ? FilteredItems.OrderBy(item => Columns.FirstOrDefault(col => col.FieldName == sortColumn)?.GetValue(item), StringComparer.OrdinalIgnoreCase)
        : FilteredItems.OrderByDescending(item => Columns.FirstOrDefault(col => col.FieldName == sortColumn)?.GetValue(item), StringComparer.OrdinalIgnoreCase);

    private void SortByColumn(ColumnDefinition<TItem> column)
    {
        if (sortColumn == column.FieldName)
        {
            sortAscending = !sortAscending; // Inverte a ordem de classificação
        }
        else
        {
            sortColumn = column.FieldName;
            sortAscending = true; // Define a classificação como ascendente por padrão
        }
    }

    private void AddNewItem()
    {
        OnAdd.InvokeAsync(default);
    }

    private void EditItem(TItem item)
    {
        selectedItem = item;
        OnEdit.InvokeAsync(item);
    }

    private void DeleteItem(TItem item)
    {
        // Chama o método OnDelete sem remover o item diretamente
        OnDelete.InvokeAsync(item);
    }

    private class ColumnDefinition<TItem>
    {
        public string Title { get; set; } = string.Empty;
        public string FieldName { get; set; } = string.Empty;
        public Func<TItem, string> GetValue { get; set; } = item => string.Empty;
    }
}
